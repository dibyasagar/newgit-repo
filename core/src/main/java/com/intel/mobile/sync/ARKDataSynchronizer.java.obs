package com.intel.mobile.sync;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Calendar;

import javax.jcr.Node;
import javax.jcr.PathNotFoundException;
import javax.jcr.RepositoryException;
import javax.jcr.Session;

import org.apache.commons.io.IOUtils;
import org.apache.sling.commons.json.JSONArray;
import org.apache.sling.commons.json.JSONException;
import org.apache.sling.commons.json.JSONObject;
import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.intel.mobile.constants.IntelMobileConstants;
import com.intel.mobile.services.IntelConfigurationService;
import com.intel.mobile.util.IntelUtil;
import com.intel.mobile.vo.SyncMessageVO;

/**
 * @author skarm1
 *
 */

public class ARKDataSynchronizer {

	private static final Logger LOG = LoggerFactory.getLogger(ARKDataSynchronizer.class);


	public void syncARKData(Session jcrSession, SyncMessageVO messages) throws PathNotFoundException, RepositoryException{

		try {
			Node intelRootNode = jcrSession.getNode(IntelMobileConstants.INTEL_CONTENT_ROOT_NODE_PATH);
			Node arkNode = null;

			/*Retrieve the "ark" page if it already exists*/
			if(intelRootNode.hasNode(IntelMobileConstants.NODE_NAME_ARK)){
				arkNode = intelRootNode.getNode(IntelMobileConstants.NODE_NAME_ARK);
			}else{
				/*Create the "ark" page*/
				arkNode =  IntelUtil.createNode(intelRootNode, IntelMobileConstants.NODE_NAME_ARK, IntelMobileConstants.PRIMARY_TYPE_CQ_PAGE);
				Node jcrContentProducts = arkNode.addNode( IntelMobileConstants.NODE_JCR_CONTENT, IntelMobileConstants.PRIMARY_TYPE_CQ_PAGE_CONTENT);
				jcrContentProducts.setProperty(IntelMobileConstants.PROPERTY_CQ_TEMPLATE, IntelMobileConstants.PRODUCT_DETAILS_TEMPLATE_PATH);
				jcrContentProducts.setProperty(IntelMobileConstants.PROPERTY_JCR_TITLE, "ARK");
				jcrContentProducts.setProperty(IntelMobileConstants.PROPERTY_SLING_RESOURCETYPE, IntelMobileConstants.PRODUCT_DETAILS_PAGE_COMPONENT_PATH);

			}

			//Sync Processors
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_PROCESSORS, messages);

			//Sync Chassis
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_CHASSIS, messages);

			//Sync DesktopBoards
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_DESKTOPBOARD, messages);

			//Sync EthernetAdapters
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_ETHERNET_ADAPTERS, messages);

			//Sync EthernetControllers
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_ETHERNET_CONTROLLERS, messages);

			//Sync ProductGenerics
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_PRODUCT_GENERICS, messages);

			//Sync RAIDs
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_RAIDS, messages);

			//Sync ServerSystems
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_SERVER_SYSTEMS, messages);

			//Sync ServerWorkstationBoards
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_SERVER_WORKSTATION_BOARDS, messages);

			//Sync Softwares
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_SOFTWARES, messages);

			//Sync SparesAndAccessories
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_SPARE_AND_ACCESSORIES, messages);

			//Sync SSDs
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_SSDS, messages);

			//Sync SwitchesAndRouters
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_SWITCHES_AND_ROUTERS, messages);

			//Sync Wirelesses
			syncARKDataBasedOnProductType(jcrSession, arkNode,IntelMobileConstants.ARK_PRODUCT_TYPE_WIRELESSES, messages);
			
			messages.addSuccessMessage("Sync ARK Data");
		} catch (Exception e) {
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data");
			sb.append(", Exception - ");
			sb.append(e.getMessage());
			messages.addFailureMessage(sb.toString());
		}


	}

	/**
	 * This method gets all the pROCESSORS from intel-ARK-API and create nodes in the CRX repository
	 * @param jcrSession
	 * @throws RepositoryException 
	 * @throws PathNotFoundException 
	 */

	private void syncARKDataBasedOnProductType(Session jcrSession, Node arkNode, String productType, SyncMessageVO messages){

		try {
			LOG.info("INSIDE syncARKDataBasedOnProductType , Synching "+productType);
			Node productTypeNode = null;
			Node productNode = null;
			Node details = null;
			
			
			BundleContext bundleContext = FrameworkUtil.getBundle(IntelConfigurationService.class).getBundleContext();  
			IntelConfigurationService intelConfigService = (IntelConfigurationService) bundleContext.getService(bundleContext.getServiceReference(IntelConfigurationService.class.getName()));
			
			StringBuffer intelArkServiceURL = new StringBuffer();
			intelArkServiceURL.append(intelConfigService.getArkApiUrl()).append(productType).append("?");   
			intelArkServiceURL.append("$top=").append("1");
			intelArkServiceURL.append("&$inlinecount=allpages");
			intelArkServiceURL.append("&$format=json");
			intelArkServiceURL.append("&$callback=arkresults");
			intelArkServiceURL.append("&api_key=").append(intelConfigService.getArkApiKey());

			LOG.info("ARK url for product "+productType+" :"+intelArkServiceURL.toString());

			URL intelArkAPIUrl = new URL(intelArkServiceURL.toString());
			InputStream processorsStream =  intelArkAPIUrl.openStream();

			String jsonTxt = IOUtils.toString(processorsStream);
			jsonTxt = jsonTxt.substring("arkresults(".length(), jsonTxt.length() - 1);
			LOG.info("jsonTxt :"+jsonTxt);
			JSONObject json = new JSONObject(jsonTxt); 
			JSONObject dObject = json.getJSONObject("d");
			int totalResults = Integer.parseInt(dObject.getString("__count"));
			LOG.info("totalResults :"+totalResults);


			int size = Integer.parseInt(intelConfigService.getTopSize());
			int mod = totalResults%size;
			int noOfAPICall = 0;
			if (totalResults<size) {
				noOfAPICall = 1;
			} else if (mod==0) {
				noOfAPICall = totalResults/size;
			} else {
				noOfAPICall = (totalResults/size)+1;
			}

			LOG.info("noOfAPICall :"+noOfAPICall);

			//Retrieve the "productType" page if it already exists
			if(arkNode.hasNode(productType)){
				productTypeNode = arkNode.getNode(productType);
			}else{
				/*Create the "productType" page*/
				productTypeNode =  IntelUtil.createNode(arkNode, productType, IntelMobileConstants.PRIMARY_TYPE_CQ_PAGE);
				Node jcrContentProducts = productTypeNode.addNode( IntelMobileConstants.NODE_JCR_CONTENT, IntelMobileConstants.PRIMARY_TYPE_CQ_PAGE_CONTENT);
				jcrContentProducts.setProperty(IntelMobileConstants.PROPERTY_CQ_TEMPLATE, IntelMobileConstants.PRODUCT_LISTING_TEMPLATE_PATH);
				jcrContentProducts.setProperty(IntelMobileConstants.PROPERTY_JCR_TITLE, productType);
				jcrContentProducts.setProperty(IntelMobileConstants.PROPERTY_SLING_RESOURCETYPE, IntelMobileConstants.PRODUCT_LISTING_PAGE_COMPONENT_PATH);
			}
			
			
			int skip = 0;

			for(int i=1;i<=noOfAPICall;i++){
				try {
					intelArkServiceURL.delete(0, intelArkServiceURL.length());
					intelArkServiceURL.append(intelConfigService.getArkApiUrl()).append(productType).append("?");
					intelArkServiceURL.append("$skip=").append(skip);
					intelArkServiceURL.append("&$top=").append("100");
					intelArkServiceURL.append("&$inlinecount=allpages");
					intelArkServiceURL.append("&$format=json");
					intelArkServiceURL.append("&$callback=arkresults");
					intelArkServiceURL.append("&api_key=").append(intelConfigService.getArkApiKey());

					skip = skip + Integer.parseInt(intelConfigService.getTopSize());

					LOG.info("ARK Processor API URL :"+intelArkServiceURL.toString());
					intelArkAPIUrl = new URL(intelArkServiceURL.toString());
					processorsStream =  intelArkAPIUrl.openStream();

					jsonTxt = IOUtils.toString(processorsStream);
					jsonTxt = jsonTxt.substring("arkresults(".length(), jsonTxt.length() - 1);

					json = new JSONObject(jsonTxt); 
					dObject = json.getJSONObject("d");
					JSONArray results = dObject.getJSONArray("results");

					for(int j=0; j<results.length();j++){
						String msgProductName = null;
						try {
							JSONObject product = results.getJSONObject(j);
							msgProductName = product.getString("ProductName");
							if(productTypeNode.hasNode(product.getString("ProductId"))){
								productNode = productTypeNode.getNode(product.getString("ProductId"));
								Node jcrContent = productNode.getNode(IntelMobileConstants.NODE_JCR_CONTENT);
								details = jcrContent.getNode(IntelMobileConstants.NODE_NAME_DETAILS);
								LOG.info(product.getString("ProductId")+ " Product Node of type "+productType+" Exists.");
								
							}else{
								productNode = productTypeNode.addNode(product.getString("ProductId"),IntelMobileConstants.PRIMARY_TYPE_CQ_PAGE);
								Node jcrContent =  productNode.addNode( IntelMobileConstants.NODE_JCR_CONTENT, IntelMobileConstants.PRIMARY_TYPE_CQ_PAGE_CONTENT);
								jcrContent.setProperty(IntelMobileConstants.PROPERTY_CQ_TEMPLATE, IntelMobileConstants.PRODUCT_DETAILS_TEMPLATE_PATH);
								jcrContent.setProperty(IntelMobileConstants.PROPERTY_JCR_TITLE, product.getString("ProductName"));
								jcrContent.setProperty(IntelMobileConstants.PROPERTY_SLING_RESOURCETYPE, IntelMobileConstants.PRODUCT_DETAILS_PAGE_COMPONENT_PATH);
								details = jcrContent.addNode(IntelMobileConstants.NODE_NAME_DETAILS,IntelMobileConstants.PRIMARY_TYPE_NT_UNSTRUCTURED);
								LOG.info(product.getString("ProductId")+ " Product Node of type "+productType+" Created.");
							}							
							details.setProperty("LastSyncDate", Calendar.getInstance());
							IntelUtil.saveAPIDataAsJCRProperty(details,product);
							
							StringBuilder sb = new StringBuilder();
							sb.append("Sync ARK Data, Product Type - ");
							sb.append(productType);
							sb.append(", Product Name - ");
							sb.append(msgProductName);							
							messages.addSuccessMessage(sb.toString());
							
						} catch(Exception e) {
							if(msgProductName != null){
								StringBuilder sb = new StringBuilder();
								sb.append("Sync ARK Data, Product Type - ");
								sb.append(productType);
								sb.append(", Product Name - ");
								sb.append(msgProductName);
								sb.append(", Exception - ");
								sb.append(e.getMessage());							
								messages.addFailureMessage(sb.toString());
							} else {
								StringBuilder sb = new StringBuilder();
								sb.append("Sync ARK Data, Product Type - ");
								sb.append(productType);
								sb.append(", Exception - ");
								sb.append(e.getMessage());
								messages.addFailureMessage(sb.toString());
							}
						}
					}
					StringBuilder sb = new StringBuilder();
					sb.append("Sync ARK Data, Product Type - ");
					sb.append(productType);
					messages.addSuccessMessage(sb.toString());
					
				} catch(Exception e) {
					StringBuilder sb = new StringBuilder();
					sb.append("Sync ARK Data, Product Type - ");
					sb.append(productType);
					sb.append(", Exception - ");
					sb.append(e.getMessage());				
					messages.addFailureMessage(sb.toString());
				}
			}
			jcrSession.save();
			
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data, Product Type - ");
			sb.append(productType);
			messages.addSuccessMessage(sb.toString());
		} catch (MalformedURLException e) {
			LOG.error("MalformedURLException :"+e.getMessage());
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data, Product Type - ");
			sb.append(productType);
			sb.append(", Exception - ");
			sb.append(e.getMessage());
			messages.addFailureMessage(sb.toString());
		} catch (IOException e) {
			LOG.error("IOException :"+e.getMessage());
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data, Product Type - ");
			sb.append(productType);
			sb.append(", Exception - ");
			sb.append(e.getMessage());
			messages.addFailureMessage(sb.toString());	
		} catch (JSONException e) {
			LOG.error("JSONException :"+e.getMessage());
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data, Product Type - ");
			sb.append(productType);
			sb.append(", Exception - ");
			sb.append(e.getMessage());
			messages.addFailureMessage(sb.toString());			
		} catch (RepositoryException e) {
			LOG.error("RepositoryException :"+e.getMessage());
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data, Product Type - ");
			sb.append(productType);
			sb.append(", Exception - ");
			sb.append(e.getMessage());
			messages.addFailureMessage(sb.toString());
		} catch (Exception e) {
			LOG.error("Exception :"+e.getMessage());
			StringBuilder sb = new StringBuilder();
			sb.append("Sync ARK Data, Product Type - ");
			sb.append(productType);
			sb.append(", Exception - ");
			sb.append(e.getMessage());
			messages.addFailureMessage(sb.toString());
		}
	}


}
