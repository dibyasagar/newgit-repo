/**
 * 
 */
package com.intel.mobile.sync;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;

import javax.jcr.Node;
import javax.jcr.PathNotFoundException;
import javax.jcr.RepositoryException;
import javax.jcr.Session;

import org.apache.commons.io.IOUtils;
import org.apache.sling.commons.json.JSONArray;
import org.apache.sling.commons.json.JSONException;
import org.apache.sling.commons.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.intel.mobile.constants.IntelMobileConstants;
import com.intel.mobile.util.IntelUtil;

/**
 * @author skarm1
 *
 */
public class ProcessorsSynchronizer {

	
	private static final Logger log = LoggerFactory.getLogger(ProcessorsSynchronizer.class);
	
	/**
	 * This method gets all the processors from intel-shop-API and create nodes in the CRX repository
	 * @param jcrSession
	 * @throws RepositoryException 
	 * @throws PathNotFoundException 
	 */
	public void syncProcessors(Session jcrSession) throws PathNotFoundException, RepositoryException{

		try {

			String intelServiceURL = "http://int-shop-api.dev.mrmpweb.co.uk/api/helperservice/getprocessors?&apikey=IO6+wTWJ+E+uizNDBNTiuQ==&format=json";
			URL intelShopAPIUrl = new URL(intelServiceURL);
			InputStream featureProductsStream =  intelShopAPIUrl.openStream();

			String jsonTxt = IOUtils.toString(featureProductsStream);
			JSONObject json = new JSONObject(jsonTxt); 
			JSONArray items = json.getJSONArray("items");

			Node intelRootNode = jcrSession.getNode(IntelMobileConstants.INTEL_CONTENT_LOCALE_ENGLISH_NODE_PATH);
			Node shopNode = null ;
			Node processorsNode = null;
			if(intelRootNode.hasNode(IntelMobileConstants.NODE_NAME_SHOP)){
				shopNode = intelRootNode.getNode(IntelMobileConstants.NODE_NAME_SHOP);
			}else{
				shopNode = IntelUtil.createNode(intelRootNode, IntelMobileConstants.NODE_NAME_SHOP, IntelMobileConstants.SLING_FOLDER_TYPE);
			}

			if(shopNode.hasNode(IntelMobileConstants.NODE_NAME_PROCESSORS)){
				processorsNode = shopNode.getNode(IntelMobileConstants.NODE_NAME_PROCESSORS);
				processorsNode.remove();
			}
			processorsNode =  IntelUtil.createNode(shopNode, IntelMobileConstants.NODE_NAME_PROCESSORS, IntelMobileConstants.SLING_FOLDER_TYPE);

			for(int i=0; i<items.length();i++){

				JSONObject item = items.getJSONObject(i);
				/*log.info("name : "+item.getString("name"));
				log.info("value : "+item.getString("value"));*/
				Node processorNode = processorsNode.addNode(IntelMobileConstants.NODE_NAME_PROCESSOR+i);
				processorNode.setProperty(IntelMobileConstants.PROPERTY_NAME_NAME, item.getString("name"));
				processorNode.setProperty(IntelMobileConstants.PROPERTY_NAME_VALUE, item.getString("value"));
			}
			jcrSession.save();

			log.info("jsonTxt :"+jsonTxt);

		} catch (MalformedURLException e) {
			log.error("MalformedURLException :"+e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			log.error("IOException :"+e.getMessage());
			e.printStackTrace();
		} catch (JSONException e) {
			log.error("JSONException :"+e.getMessage());
			e.printStackTrace();
		}
	}
	
	

	
}
